package it.twopay.entity;

import java.util.Arrays;
import java.util.Map;

import it.twopay.entity.Car;

/* =================
PRE CHECK
*/
rule "Rule: pre check"
ruleflow-group "precheck"
when
    $car: Car($actions: actions)
    $action: Car.Action(
        command in (CarCommands.CHECK_MIRROR, CarCommands.RELEASE_PARKING_BRAKE, CarCommands.FASTEN_SEATBELT)
        && state == 'init'
    ) from $actions
then
    $car.log.info("### Rule: precheck for " + $action.getCommand().name());
    modify($action) {
        setState("checked")
    }
    modify($car) {
        setState("allow-start")
    }
end

/* =================
PRE CHECK
*/
rule "Rule: auto operations"
ruleflow-group "auto-ops"
when
	$car: Car()
	$action: Car.Action(command == CarCommands.START_TRIP && state == 'init') from $car.actions
then
	$car.log.info("### Rule: Rule: auto operation");	
	modify($action) {
		setState("checked")
	}
	modify($car) {
		perform(CarCommands.FILL_UP_TANK)
	}
end


/* =================
Post Check
*/
rule "Rule: report precheck errors"
ruleflow-group "postcheck"
when
	$car: Car(
		state == "allow-start" &&
		stateCount != 3
	)
then
	$car.log.info("### Rule: report precheck errors");
	for (CarCommands command : Arrays.asList(CarCommands.CHECK_MIRROR, CarCommands.RELEASE_PARKING_BRAKE, CarCommands.FASTEN_SEATBELT)) {
		if (!$car.getCommands().contains(command)) {
			String error = "Missing action " + command.name();
			$car.addError(error);
		}
	};
	modify($car) {
        setState("error")
    }
end

rule "Rule: start car"
ruleflow-group "postcheck"
when
	$car: Car(
		state == "allow-start" &&
		stateCount == 3
	)
then
	$car.log.info("### Rule: start car");
	$car.perform(CarCommands.AUTO_IGNITION);
end
